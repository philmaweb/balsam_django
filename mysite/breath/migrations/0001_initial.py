# Generated by Django 2.2.1 on 2019-06-16 18:13

import breath.models
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisFileSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload', models.FileField(upload_to='archives/%Y/%m/%d/', validators=[breath.models.ZipFileValidator(max_size=104857600)])),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClassPredictionFileSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload', models.FileField(upload_to='archives/%Y/%m/%d/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('filename_class_label_dict', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomPeakDetectionFileSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('peak_detection_results', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('class_label_processed_id_dict', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='FileSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('raw_files', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('processed_files', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('peak_detection_results', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('class_label_processed_id_dict', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='MccImsAnalysisWrapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preprocessing_options', django.contrib.postgres.fields.jsonb.JSONField()),
                ('evaluation_options', django.contrib.postgres.fields.jsonb.JSONField()),
                ('class_label_mapping', django.contrib.postgres.fields.jsonb.JSONField()),
                ('is_automatic_analysis', models.BooleanField(default=False)),
                ('is_custom_analysis', models.BooleanField(default=False)),
                ('is_custom_feature_matrix_analysis', models.BooleanField(default=False)),
                ('automatic_selected_method_name', models.CharField(default='', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PredefinedCustomPeakDetectionFileSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
                ('peak_detection_results', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('class_label_processed_id_dict', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('upload', models.FileField(upload_to='archives/predefined_pdr/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PredefinedFileset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(max_length=100)),
                ('filename_class_label_dict', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('upload', models.FileField(upload_to='archives/predefined_raw/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProcessedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('label', models.CharField(max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(upload_to='data/processed/')),
            ],
        ),
        migrations.CreateModel(
            name='RawFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('header', django.contrib.postgres.fields.jsonb.JSONField()),
                ('name', models.CharField(max_length=100)),
                ('label', models.CharField(max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(upload_to='data/raw/')),
            ],
        ),
        migrations.CreateModel(
            name='UnlinkedWebPeakDetectionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=100)),
                ('peak_detection_method_name', models.CharField(max_length=20)),
                ('csv_file', models.FileField(upload_to='data/peak_detection/')),
            ],
        ),
        migrations.CreateModel(
            name='WebPredictionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('scipy_predictor_pickle', models.FileField(upload_to='prediction/prediction_model/')),
                ('feature_names_by_pdm', django.contrib.postgres.fields.jsonb.JSONField()),
                ('class_labels', django.contrib.postgres.fields.jsonb.JSONField()),
                ('mcc_ims_analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
            ],
        ),
        migrations.CreateModel(
            name='WebPeakDetectionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=100)),
                ('peak_detection_method_name', models.CharField(max_length=20)),
                ('csv_file', models.FileField(upload_to='data/peak_detection/')),
                ('preprocessed_measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.ProcessedFile')),
            ],
        ),
        migrations.CreateModel(
            name='WebImsSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload', models.FileField(upload_to='archives/%Y/%m/%d/', validators=[breath.models.ZipFileValidator(max_size=104857600)])),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.FileSet')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TempUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StatisticsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_method_name', models.CharField(max_length=100)),
                ('statistics_dict', django.contrib.postgres.fields.jsonb.JSONField()),
                ('best_features_df', models.FileField(upload_to='data/best_features/')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
            ],
        ),
        migrations.CreateModel(
            name='RocPlotModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('based_on_peak_detection_method_name', models.CharField(max_length=100)),
                ('figure', models.ImageField(blank=True, upload_to=breath.models.figure_user_directory_path)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('based_on_performance_measure_name', models.CharField(max_length=100)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='processedfile',
            name='raw_file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.RawFile'),
        ),
        migrations.CreateModel(
            name='PredictionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_assignment', django.contrib.postgres.fields.jsonb.JSONField()),
                ('original_class_labels', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('peak_detection_method_name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('web_prediction_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.WebPredictionModel')),
            ],
        ),
        migrations.CreateModel(
            name='OverlayPlotModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('based_on_peak_detection_method_name', models.CharField(max_length=100)),
                ('figure', models.ImageField(blank=True, upload_to=breath.models.figure_user_directory_path)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('based_on_measurement', models.CharField(max_length=100)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='mccimsanalysiswrapper',
            name='ims_set',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='breath.WebImsSet'),
        ),
        migrations.AddField(
            model_name='mccimsanalysiswrapper',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='IntensityPlotModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('based_on_peak_detection_method_name', models.CharField(max_length=100)),
                ('figure', models.ImageField(blank=True, upload_to=breath.models.figure_user_directory_path)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('based_on_measurement', models.CharField(max_length=100)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureMatrix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('peak_detection_method_name', models.CharField(max_length=100)),
                ('file', models.FileField(upload_to='data/feature_matrix/')),
                ('class_label_dict', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('is_training_matrix', models.BooleanField(default=True)),
                ('analysis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
            ],
        ),
        migrations.CreateModel(
            name='DecisionTreePlotModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('based_on_peak_detection_method_name', models.CharField(max_length=100)),
                ('figure', models.ImageField(blank=True, upload_to=breath.models.figure_user_directory_path)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('based_on_performance_measure_name', models.CharField(max_length=100)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClusterPlotModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('based_on_peak_detection_method_name', models.CharField(max_length=100)),
                ('figure', models.ImageField(blank=True, upload_to=breath.models.figure_user_directory_path)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('based_on_peak_alignment_method_name', models.CharField(max_length=100)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClasswiseHeatMapPlotModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('based_on_peak_detection_method_name', models.CharField(max_length=100)),
                ('figure', models.ImageField(blank=True, upload_to=breath.models.figure_user_directory_path)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('based_on_measurement_list', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('class_label', models.CharField(max_length=100)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BoxPlotModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('based_on_peak_detection_method_name', models.CharField(max_length=100)),
                ('figure', models.ImageField(blank=True, upload_to=breath.models.figure_user_directory_path)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('based_on_performance_measure_name', models.CharField(max_length=100)),
                ('based_on_peak_id', models.CharField(max_length=100)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BestFeaturesOverlayPlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('based_on_peak_detection_method_name', models.CharField(max_length=100)),
                ('figure', models.ImageField(blank=True, upload_to=breath.models.figure_user_directory_path)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('based_on_measurement', models.CharField(max_length=100)),
                ('based_on_performance_measure_name', models.CharField(max_length=100)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.MccImsAnalysisWrapper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebCustomSet',
            fields=[
                ('analysisfileset_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='breath.AnalysisFileSet')),
                ('file_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='breath.CustomPeakDetectionFileSet')),
            ],
            bases=('breath.analysisfileset',),
        ),
        migrations.AddField(
            model_name='mccimsanalysiswrapper',
            name='custom_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='breath.WebCustomSet'),
        ),
    ]
